#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2

# Load the COCO class labels
class_names = []
with open("coco.names", "r") as f:
    class_names = [cname.strip() for cname in f.readlines()]

# Load the trained YOLOv4 object detector
net = cv2.dnn.readNet("yolov4.weights", "yolov4.cfg")

# Initialize the CvBridge
bridge = CvBridge()

# Define the image callback function
def image_callback(msg):
    # Convert the ROS image message to a OpenCV image
    image = bridge.imgmsg_to_cv2(msg, desired_encoding="bgr8")

    # Get the image dimensions
    height, width = image.shape[:2]

    # Create a blob from the image and set input to the network
    blob = cv2.dnn.blobFromImage(image, 1/255.0, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)

    # Run forward pass on the network and get output
    output_layers = net.getUnconnectedOutLayersNames()
    layer_outputs = net.forward(output_layers)

    # Initialize lists to store detected bounding boxes, confidences, and class IDs
    boxes = []
    confidences = []
    class_ids = []

    # Loop over each output layer, decode the predictions, and filter out weak detections
    for output in layer_outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Apply non-maxima suppression to suppress overlapping boxes
    idxs = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw the final bounding boxes and class labels on the image
    if len(idxs) > 0:
        for i in idxs.flatten():
            x, y = boxes[i][0], boxes[i][1]
            w, h = boxes[i][2], boxes[i][3]
            cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
            text = f"{class_names[class_ids[i]]}: {confidences[i]:.2f}"
            cv2.putText(image, text, (x, y-5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Show the final output image
    cv2.imshow("Object Detection", image)
    cv2.waitKey(1)

# Initialize the ROS node
rospy.init_node("object_detection_node")

# Subscribe to the image topic
rospy.Subscriber("/camera/image_raw", Image, image_callback)

# Spin the node
rospy.spin()
